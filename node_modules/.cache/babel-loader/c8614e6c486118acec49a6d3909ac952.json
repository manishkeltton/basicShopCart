{"ast":null,"code":"var _jsxFileName = \"/var/www/html/products/src/loginPage/useForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Redirect, useHistory } from 'react-router';\nimport MainComponent from '../components/MainComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useForm = (callback, validate) => {\n  _s();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLogged, setIsLogged] = useState(false);\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  const handleSubmit = event => {\n    setErrors(validate(values));\n    setIsSubmitting(true);\n    console.log(values.email + values.password);\n\n    if (values.email == \"mk@gmail.com\" && values.password == \"12345678\") {\n      /*#__PURE__*/\n      _jsxDEV(Redirect, {\n        to: \"/am\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this);\n\n      localStorage.setItem(\"token\", \"T\");\n      setIsLogged(true);\n    }\n\n    if (event) event.preventDefault();\n  };\n\n  const handleChange = event => {\n    event.persist();\n    setValues(values => ({ ...values,\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\n_s(useForm, \"GrRUOcbLQX0nnpwUJX9wyGqZyRA=\");\n\nexport default useForm;","map":{"version":3,"sources":["/var/www/html/products/src/loginPage/useForm.js"],"names":["useState","useEffect","Redirect","useHistory","MainComponent","useForm","callback","validate","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","isLogged","setIsLogged","Object","keys","length","handleSubmit","event","console","log","email","password","localStorage","setItem","preventDefault","handleChange","persist","target","name","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAAA;;AAEtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACc,QAAD,EAAUC,WAAV,IAAyBf,QAAQ,CAAC,KAAD,CAAvC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,MAApB,KAA+B,CAA/B,IAAoCN,YAAxC,EAAsD;AACpDN,MAAAA,QAAQ;AACT;AACF,GAJQ,EAIN,CAACI,MAAD,CAJM,CAAT;;AAMA,QAAMS,YAAY,GAAIC,KAAD,IAAW;AAC9BT,IAAAA,SAAS,CAACJ,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAK,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYd,MAAM,CAACe,KAAP,GAAef,MAAM,CAACgB,QAAlC;;AACA,QAAGhB,MAAM,CAACe,KAAP,IAAgB,cAAhB,IAAkCf,MAAM,CAACgB,QAAP,IAAmB,UAAxD,EAAmE;AACjE;AAAA,cAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B,GAA9B;AACAX,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AACD,QAAIK,KAAJ,EAAWA,KAAK,CAACO,cAAN;AACZ,GAVD;;AAYA,QAAMC,YAAY,GAAIR,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACS,OAAN;AACApB,IAAAA,SAAS,CAACD,MAAM,KAAK,EAAE,GAAGA,MAAL;AAAa,OAACY,KAAK,CAACU,MAAN,CAAaC,IAAd,GAAqBX,KAAK,CAACU,MAAN,CAAaE;AAA/C,KAAL,CAAP,CAAT;AACD,GAHD;;AAKA,SAAO;AACLJ,IAAAA,YADK;AAELT,IAAAA,YAFK;AAGLX,IAAAA,MAHK;AAILE,IAAAA;AAJK,GAAP;AAMD,CApCD;;GAAML,O;;AAsCN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Redirect, useHistory } from 'react-router';\nimport MainComponent from '../components/MainComponent';\n\nconst useForm = (callback, validate) => {\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLogged,setIsLogged] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  const handleSubmit = (event) => {\n    setErrors(validate(values));\n    setIsSubmitting(true);\n    console.log(values.email + values.password);\n    if(values.email == \"mk@gmail.com\" && values.password == \"12345678\"){\n      <Redirect to=\"/am\" />\n      localStorage.setItem(\"token\", \"T\");\n      setIsLogged(true);\n    }\n    if (event) event.preventDefault();\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  }\n};\n\nexport default useForm;"]},"metadata":{},"sourceType":"module"}